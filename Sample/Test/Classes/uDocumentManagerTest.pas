unit uDocumentManagerTest;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, uDocumentParamsAPI, uMDContainerSingleton, uDocumentManager;

type
  // Test methods for class TDocumentManager

  TDocumentManagerTest = class(TTestCase)
  strict private
    FDocumentManager: TDocumentManager;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestSaveEmpty;
    procedure TestSaveNotEmpty;
  end;

implementation

uses
  System.SysUtils, System.Rtti, uNotifyChangeAPI;

procedure TDocumentManagerTest.SetUp;
begin
  FDocumentManager := TDocumentManager.Create;
  FDocumentManager.setNotifyChange(TVirtualInterface.Create(
    TypeInfo(INotifyChangeAPI), nil) as INotifyChangeAPI);
end;

procedure TDocumentManagerTest.TestSaveEmpty;
var
  ReturnValue: string;
  lDocumentParams: IDocumentParamsAPI;
begin
  lDocumentParams := TMDCSingleton.DefaultInstance.new<IDocumentParamsAPI>;

  ReturnValue := FDocumentManager.Save(lDocumentParams);
  CheckEquals('O documento está vazio.', ReturnValue, 'Retorno inválido');
end;

procedure TDocumentManagerTest.TestSaveNotEmpty;
var
  ReturnValue: string;
  lDocumentParams: IDocumentParamsAPI;
begin
  lDocumentParams := TVirtualInterface.Create(TypeInfo(IDocumentParamsAPI),
    procedure(Method: TRttiMethod; const Args: TArray<TValue>; out Result: TValue)
    begin
      if Method.Name = 'GetContent' then
        Result := 'Mock';
    end
    ) as IDocumentParamsAPI;

  ReturnValue := FDocumentManager.Save(lDocumentParams);
  CheckEquals(EmptyStr, ReturnValue, 'Retorno inválido');
end;

procedure TDocumentManagerTest.TearDown;
begin
  FDocumentManager.Free;
end;

initialization

// Register any test cases with the test runner
RegisterTest(TDocumentManagerTest.Suite);

end.
